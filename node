  # # class ArithmeticAddList(list):
# #     def __init__(self,data=()):
# #         super().__init__(data)
# #     def __add__(self, other):
# #         if len(self) != len(other):
# #             raise Exception("리스트의 길이가 다릅니다.")
# #         result = ArithmeticAddList()
# #         for item1,item2 in zip(self,other):
# #             result.append(item1+item2)
# #         return result
# # alist1 = ArithmeticAddList([1,2,3])
# # alist2 = ArithmeticAddList([4,5,6])
# # alist3 = alist1 + alist2
# # print(alist3)
# #
# # class Point2D:
# #     def __init__(self,x,y):
# #         self.x = x
# #         self.y = y
# #     def __eq__(self, other):
# #         return self.x == other.x and self.y == other.y
# #     def __ne__(self, other):
# #         return not self.__eq__(other)
# # pt1 = Point2D(1,2)
# # pt2 = Point2D(1,2)
# # pt3 = Point2D(2,2)
# # print(pt1 == pt2)
# # print(pt2 == pt3)
# # print(pt2 != pt3)
# #
# # class ThreeItem:
# #     def __init__(self,item1,item2,item3):
# #         self.item1 = item1
# #         self.item2 = item2
# #         self.item3 = item3
# #     def __getitem__(self, item):
# #         if item == 0:
# #             return self.item1
# #         elif item == 1:
# #             return self.item2
# #         elif item == 2:
# #             return self.item3
# #         else:
# #             raise IndexError("0~2의 값만 참조할 수 있습니다.")
# 
# class Node:
#     def __init__(self,data,link=None):
#         self.data = data
#         self.link = link
# # b = Node(2)
# # a = Node(1,b)
# # print(a.data)
# # print(a.link.data)
# # print(a.link.link)
# 
# class MyList:
#     def __init__(self,*args):
#         self.head = None
#         self.tail = None
#         self.length = 0
#         for arg in args:
#             self.append(arg)
#     def append(self,data):
#         node = Node(data)
#         if self.head is None:
#             self.head = node
#             self.tail = node
#         else:
#             self.tail.link = node
#             self.tail = node
#         self.length += 1
#     def __iter__(self):
#         def gen():
#             curr = self.head
#             while curr is not None:
#                 yield curr.data
#                 curr = curr.link
#         return gen()
#     def __len__(self):
#         return self.length
#     # def __str__(self):
#     #     answer = "<"
#     #     for i in self:
#     #         answer = answer + str(i) + ", "
#     #     answer = answer[:-2] + ">"
#     #     return answer
#     def __str__(self):
#         s = "<"
#         for idx, data in enumerate(self):
# 
#             s += str(data)
#             if idx < len(self)-1:
#                 s += ", "
#             else:
#                 s += ">"
#         return s
#     def __getitem__(self, item):
#         if type(item) is not int:
#             raise TypeError("인덱스는 반드시 정수여야 합니다.")
#         if item < 0:
#             item = len(self) + item
#         if item >= len(self) or item < 0:
#             raise IndexError("인덱스 범위를 벗어났습니다.")
#         for idx, data in enumerate(self):
#             if idx == item:
#                 return data
#     # def __setitem__(self, key, value):
#     #     curr = self.head
#     #     a = 0
#     #     while key != a:
#     #         curr = curr.link
#     #         a += 1
#     #     curr.data = value
#     def __setitem__(self, key, value):
#         if type(key) is not int:
#             raise TypeError("인덱스는 반드시 정수여야 합니다.")
#         if key < 0:
#             item = len(self) + key
#         if key >= len(self) or key < 0:
#             raise IndexError("인덱스 범위를 벗어났습니다.")
#         curr = self.head
#         for i in range(key):
#             curr = curr.link
#         curr.data = value
# mylist = MyList(1,2,3,4)
# mylist[3] = 5
# print(mylist[3])
