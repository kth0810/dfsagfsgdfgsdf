def sequential_search(dataList, targetData):
    for  index, data in enumerate(dataList):
        if data == targetData:
            return index
    return None

def binary_search(dataList, targetData):
    left = 0
    right = len(dataList)
    while left <= right:
        middle = (left + right) // 2
        if dataList[middle] == targetData:
            return middle
        elif dataList[middle] < targetData:
            left = middle + 1
        else:
            right = middle - 1
    return None
array = [1,3,4,6,7,8,10,13,14,18,19,21,24,37,40,45,71]
# print(binary_search(array,7))

def binary_search_two(dataList,targetData,left,right):
    if left > right:
        return None
    middle = (left + right) // 2
    if dataList[middle] == targetData:
        return middle
    elif dataList[middle] < targetData:
        return binary_search_two(dataList,targetData,middle + 1,right)
    else:
        return binary_search_two(dataList,targetData,left,middle-1)
# print(binary_search_two(array,7,0,len(array)))

def DFS(matrix,start_node):
    visit = [False] * len(matrix)
    stack = []
    stack.append(start_node)
    visit[start_node] = True
    print('방문',start_node)
    while stack:
        node = stack.pop()
        for next_node in range(len(matrix)):
            if matrix[node][next_node] == 1:
                if not visit[next_node]:
                    stack.append(next_node)
                    visit[next_node] = True
                    print('방문', next_node)
amatrix = [[0,1,1,0,0],[1,0,1,1,0],[1,1,0,0,0],[0,1,0,0,1],[0,0,0,1,0]]
# DFS(amatrix,0)
visit = {}
def DFSDFS(matrix,node):
    visit[node] = True
    print('방문', node)
    for next_node in range(len(matrix)):
        if matrix[node][next_node] == 1:
            if next_node not in visit:
                DFSDFS(matrix,next_node)
DFSDFS(amatrix,0)   
